pipeline {
    agent {
        node {
            label 'nodejs'
        }
    }

    parameters {
        string(name: 'TAG_NAME', defaultValue: '', description: '标签名称(vx.x.x用于发布正式版本)')
        // booleanParam(name: 'TO_PROD', defaultValue: false, description: '发布正式环境？')
    }

    environment {
        DOCKER_CREDENTIAL_ID = 'harbor-id'
        REGISTRY = 'hub.app-chengdu1.yunzhicloud.com'        
        DOCKERHUB_NAMESPACE = 'xxx'
        APP_NAME = 'xxx-xxx'
        GITLAB_CREDENTIAL_ID = 'gitlab-id'
        GIT_URL = 'gitlab.yunzhicloud.com/xxx/xxx-xxx.git'   
        GIT_EMAIL = 'devops@yzcloud.com'
        KUBECONFIG_CREDENTIAL_ID = 'kube-id'
    }

    stages {
        stage('checkout scm') {
            steps {
                checkout(scm)
            }
        }

        stage('build') {
            parallel {                
                stage('build for prod') {
                    when {
                        expression {
                            return params.TAG_NAME ==~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
                        }                        
                    }
                    steps {
                        container('nodejs') {
                            sh 'npm config set registry https://registry.npm.taobao.org/'
                            sh 'npm install --prefer-offline && npm run build:prod'
                        }
                    }
                }
                stage('build for test') {
                    when {
                        not {
                            expression {
                                return params.TAG_NAME ==~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
                            }
                        }                        
                    }
                    steps {
                        container('nodejs') {
                            sh 'npm config set registry https://registry.npm.taobao.org/'
                            sh 'npm install --prefer-offline && npm run build'
                        }
                    }
                }
            }            
        }        

        stage('build image & push snapshot') {        
            steps {
                container('nodejs') {
                    sh 'docker build -f Dockerfile -t $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER .'
                    withCredentials([usernamePassword(passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME', credentialsId: "$DOCKER_CREDENTIAL_ID",)]) {
                        sh 'echo "$DOCKER_PASSWORD" | docker login $REGISTRY -u "$DOCKER_USERNAME" --password-stdin'
                        sh 'docker push $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER'
                    }
                }
            }        
        }

        stage('push latest') {
            when {
                branch 'master'
            }
            steps {
                container('nodejs') {
                    sh '(docker rmi $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:latest || echo "not exist")'
                    sh 'docker tag $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:latest'
                    sh 'docker push $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:latest && docker rmi $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:latest'
                }
            }
        }        

        stage('deploy to test') {
            when {
                not {
                    expression {
                        return params.TAG_NAME ==~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
                    }
                }
            }
            steps {
                // input(id: 'deploy-to-test', message: '发布到测试环境?')
                kubernetesDeploy(configs: 'config/deploy-test/**', enableConfigSubstitution: true, kubeconfigId: "$KUBECONFIG_CREDENTIAL_ID")
            }
        }

        stage('add tag') {
            when {
                expression {
                    return params.TAG_NAME ==~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
                }
            }
            steps {
                container('nodejs') {
                    input(id: 'release-image-with-tag', message: '发布镜像TAG?')
                    withCredentials([usernamePassword(credentialsId: "$GITLAB_CREDENTIAL_ID", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        sh 'git config --global user.email "$GIT_EMAIL"'
                        sh 'git config --global user.name "$GIT_USERNAME"'
                        sh 'git tag -a $TAG_NAME -m "$TAG_NAME"'
                        sh 'git push https://$GIT_USERNAME:$GIT_PASSWORD@$GIT_URL --tags --ipv4'
                    }
                    sh 'docker tag $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:SNAPSHOT-$BRANCH_NAME-$BUILD_NUMBER $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:$TAG_NAME '
                    sh 'docker push $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:$TAG_NAME && docker rmi $REGISTRY/$DOCKERHUB_NAMESPACE/$APP_NAME:$TAG_NAME'
                }
            }
        }
        stage('deploy to prod') {
            when {
                expression {
                    return params.TAG_NAME ==~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
                }
            }
            steps {
                input(id: 'deploy-to-prod', message: '发布到正式环境?')
                kubernetesDeploy(configs: 'config/deploy-prod/**', enableConfigSubstitution: true, kubeconfigId: "$KUBECONFIG_CREDENTIAL_ID")
            }
        }
    }
}